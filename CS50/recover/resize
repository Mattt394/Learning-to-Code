/**
 * Resizes a BMP piece by piece, just for the lulz.
 */

#include <stdio.h>
#include <stdlib.h>
#include <cs50.h>
#include <unistd.h>
#include "bmp.h"

int main(int argc, char *argv[])
{


    // ensure proper usage
    if (argc != 4)
    {
        fprintf(stderr, "Usage: ./resize n infile outfile\n");
        return 1;
    }

    //initialise n
    int n = atoi(argv[1]);

    if (n<1 || n>100)
    {
        fprintf(stderr, "n should be between 1 and 100, thx");
        return 1;
    }

    // remember filenames & n
    char *infile = argv[2];
    char *outfile = argv[3];


    // open input file
    FILE *inptr = fopen(infile, "r");
    if (inptr == NULL)
    {
        fprintf(stderr, "Could not open %s.\n", infile);
        return 2;
    }

    // open output file
    FILE *outptr = fopen(outfile, "w");
    if (outptr == NULL)
    {
        fclose(inptr);
        fprintf(stderr, "Could not create %s.\n", outfile);
        return 3;
    }

    // read infile's BITMAPFILEHEADER
    BITMAPFILEHEADER bf;
    fread(&bf, sizeof(BITMAPFILEHEADER), 1, inptr);

    // new BITMAPFILEHEADER
    BITMAPFILEHEADER newbf;
    newbf = bf;

    // read infile's BITMAPINFOHEADER
    BITMAPINFOHEADER bi;
    fread(&bi, sizeof(BITMAPINFOHEADER), 1, inptr);

    // new BITMAPINFOHEADER
    BITMAPINFOHEADER newbi;
    newbi = bi;

    // ensure infile is (likely) a 24-bit uncompressed BMP 4.0
    if (bf.bfType != 0x4d42 || bf.bfOffBits != 54 || bi.biSize != 40 ||
        bi.biBitCount != 24 || bi.biCompression != 0)
    {
        fclose(outptr);
        fclose(inptr);
        fprintf(stderr, "Unsupported file format.\n");
        return 4;
    }

    // determine old padding
    int padding_old =  (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;


    // determine biWidth & biHeight
    newbi.biWidth = bi.biWidth*n;
    newbi.biHeight = bi.biHeight*n;

    // determine padding for scanlines
    int padding =  (4 - (newbi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;


    // determine biSizeImage + bfSize
    newbi.biSizeImage = (((sizeof(RGBTRIPLE) * newbi.biWidth) + padding) * abs(newbi.biHeight));
    newbf.bfSize = newbi.biSizeImage + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);

    // write outfile's BITMAPFILEHEADER
    fwrite(&newbf, sizeof(BITMAPFILEHEADER), 1, outptr);

    // write outfile's BITMAPINFOHEADER
    fwrite(&newbi, sizeof(BITMAPINFOHEADER), 1, outptr);

    // iterate over infile's scanlines
    for (int i = 0, biHeight = abs(bi.biHeight); i < biHeight; i++)
    {
        for (int y=0; y<n; y++)
        {

            // iterate over pixels in scanline
            for (int j = 0; j < bi.biWidth; j++)
            {
                // temporary storage
                RGBTRIPLE triple;

                // read RGB triple from infile
                fread(&triple, sizeof(RGBTRIPLE), 1, inptr);


                // resize horizontally

                    // write RGB triple to outfile
                for (int g =0; g<n; g++)
                {
                    fwrite(&triple, sizeof(RGBTRIPLE), 1, outptr);

                }
            }

            // then add it back (to demonstrate how)
            for (int k = 0; k < padding; k++)
            {
                fputc(0x00, outptr);
            }

            //Go back
            if (y<n-1)
            {
                fseek(inptr, sizeof(RGBTRIPLE)*-bi.biWidth, SEEK_CUR);
            }
        }

        // skip over padding, if any
        fseek(inptr, padding_old, SEEK_CUR);


    }

    // close infile
    fclose(inptr);

    // close outfile
    fclose(outptr);

    // success
    return 0;
}
